<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(RepoRoot)\build_tools\MicroBuild.Core.props" />

  <!-- This will be overridden if we're building with MicroBuild. -->
  <Target Name="SignFiles">
    <Message Text="Fake sign target.  Would sign: @(FilesToSign)" />
  </Target>

  <Target Name="SetSignFilesOutDir" BeforeTargets="SignFiles">
    <PropertyGroup>
      <OutDir Condition="'$(OutDir)' == ''">$(OutputDirectory)</OutDir>
      <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(IntermediateDirectory)</IntermediateOutputPath>
    </PropertyGroup>
  </Target>

  <Target Name="PostCompileSign" DependsOnTargets="GetPostCompileSignFiles;SignFiles" />

  <Target Name="GetPostCompileSignFiles" DependsOnTargets="Init">
    <ItemGroup>
      <!-- External files -->
      <FilesToSign Include="$(OutputDirectory)sdk/**/Newtonsoft.Json.dll;
                            $(OutputDirectory)shared/**/libuv.dll">
        <Authenticode>$(ExternalCertificateId)</Authenticode>
      </FilesToSign>
      <!-- Built binaries -->
      <FilesToSign Include="$(OutputDirectory)sdk/**/csc.exe;
                            $(OutputDirectory)sdk/**/csc.dll;
                            $(OutputDirectory)sdk/**/dotnet.dll;
                            $(OutputDirectory)sdk/**/System.*.dll;
                            $(OutputDirectory)sdk/**/Microsoft.*.dll;
                            $(OutputDirectory)sdk/**/NuGet*.dll;
                            $(OutputDirectory)sdk/**/datacollector.dll;
                            $(OutputDirectory)sdk/**/MSBuild.dll;
                            $(OutputDirectory)sdk/**/testhost.dll;
                            $(OutputDirectory)sdk/**/vstest.console.dll">
        <Authenticode>$(InternalCertificateId)</Authenticode>
      </FilesToSign>
      <!-- Built files for the packages -->
      <FilesToSign Include="$(Stage2CompilationDirectory)/forPackaging/**/*dotnet*.dll;
                            $(Stage2CompilationDirectory)/forPackaging/**/Microsoft.Extensions.DependencyModel.dll;
                            $(Stage2CompilationDirectory)/forPackaging/**/Microsoft.Extensions.Testing.Abstractions.dll">
        <Authenticode>$(InternalCertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="SignNuPkgContents" DependsOnTargets="GetSignNuPkgContentsFiles;SignFiles" />

  <Target Name="GetSignNuPkgContentsFiles" DependsOnTargets="Init">
    <PropertyGroup>
      <OutDir>$(RepoRoot)/src/Microsoft.DotNet.Cli.Utils</OutDir>
    </PropertyGroup>
    <ItemGroup>
      <!-- NuPkg contents -->
      <FilesToSign Include="$(RepoRoot)/src/Microsoft.DotNet.Cli.Utils/bin/**/Microsoft.DotNet.Cli.Utils.dll">
        <Authenticode>$(InternalCertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="SignMsiAndCab" DependsOnTargets="GetSignMsiAndCabFiles;SignFiles" />

  <Target Name="GetSignMsiAndCabFiles" DependsOnTargets="Init">
    <PropertyGroup>
      <OutDir>$(PackagesDirectory)</OutDir>
    </PropertyGroup>
    <ItemGroup>
      <FilesToSign Include="$(PackagesDirectory)/**/*.msi">
        <Authenticode>$(InternalCertificateId)</Authenticode>
      </FilesToSign>
      <FilesToSign Include="$(PackagesDirectory)/**/*.cab">
        <Authenticode>$(InternalCertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="SignEngine" DependsOnTargets="GetSignEngineFiles;SignFiles" />

  <Target Name="GetSignEngineFiles" DependsOnTargets="Init">
    <PropertyGroup>
      <OutDir>$(PackagesDirectory)</OutDir>
    </PropertyGroup>
    <ItemGroup>
      <FilesToSign Include="$(PackagesDirectory)/**/*engine.exe">
        <Authenticode>$(InternalCertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="SignCliBundle" DependsOnTargets="GetSignCliBundleFiles;SignFiles" />

  <Target Name="GetSignCliBundleFiles" DependsOnTargets="Init">
    <PropertyGroup>
      <OutDir>$(PackagesDirectory)</OutDir>
    </PropertyGroup>
    <ItemGroup>
      <FilesToSign Include="$(PackagesDirectory)/**/*.exe">
        <Authenticode>$(InternalCertificateId)</Authenticode>
      </FilesToSign>
    </ItemGroup>
  </Target>

  <Target Name="HandleBuildToolsAssemblyResolve" BeforeTargets="InitializeCommonProps" Condition="'$(SkipMsBuild15Projects)' == 'True'">
    <HandleAssemblyResolve SearchPath="$(RepoRoot)\build_tools" />
  </Target>
  <UsingTask TaskName="HandleAssemblyResolve" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll" Condition="'$(SkipMsBuild15Projects)' == 'True'" >
    <ParameterGroup>
      <SearchPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Reflection" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
AppDomain.CurrentDomain.AssemblyResolve += (sender, args) => 
{ 
  string assemblySearchPath = Path.Combine(SearchPath, args.Name.Split(',')[0] + ".dll");
  if (File.Exists(assemblySearchPath)) 
  {
    return Assembly.LoadFrom(assemblySearchPath);
  }
  return null;
};
]]>
      </Code>
    </Task>
  </UsingTask>

  <Import Project="$(RepoRoot)\build_tools\MicroBuild.Core.targets" />
</Project>
